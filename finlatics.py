# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18fz0RLnQ_Zk8Tf7-l3oFjVg1xJM0B0xf
"""

"""
Created on Sat Jun 15 14:48:21 2024
@author: siddh
"""
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as py
df=pd.read_csv(r"C:/Users/siddh/finlatics'/DsResearch/Banking/banking_data.csv")
pd.set_option('display.max_rows',None)
pd.set_option('display.max_columns',None)
df.info()
df.drop(columns=['marital'],inplace=True)
sns.boxplot(y='age',data=df,width=1)
plt.xlabel("Division of age")
plt.ylabel("Count")
plt.title("Division of age group in the bank")
plt.show()
plt.hist(df['age'],color='skyblue',edgecolor='black')
plt.xlabel('AGE')
plt.ylabel('COUNT')
plt.show()
# max_age_row =df.loc[df['age'].idxmax()]
# print(max_age_row)
print(pd.unique(df['job']))
job_data=df['job'].value_counts()
print(job_data)
marital_counts = df['marital_status'].value_counts()
plt.figure(figsize=(10, 6))
plt.bar(marital_counts.index, marital_counts.values, color='skyblue')
plt.xlabel('Marital Status')
plt.ylabel('Number of People')
plt.title('Distribution of Marital Status')
plt.show()
edu_levels=df['education'].value_counts()
plt.bar(edu_levels.index,edu_levels.values,color='red')
plt.title('Education levels')
plt.xlabel("distribution of education levels")
plt.ylabel("Number of people")
plt.show()
default_values=df['default'].value_counts()
print(default_values)
plt.hist(df['balance'],color='green',edgecolor='black')
plt.xlabel('Account balance')
plt.ylabel('count')
plt.show()
plt.figure(figsize=(10, 6))
var=[0,5000,10000,15000,20000,25000,30000,35000,40000]
plt.hist(df['balance'], bins=var, color='skyblue', edgecolor='black')
plt.xlabel('Average Yearly Balance')
plt.ylabel('Number of Clients')
plt.title('Distribution of Average Yearly Balance Among Clients')
plt.show()
House_loan=df['housing'].value_counts()
print(House_loan)
p_loan=df['loan'].value_counts()
print(p_loan)
contact_detail=df['contact'].value_counts()
print(contact_detail)
last_month=df['month'].value_counts()
plt.bar(last_month.index,last_month.values,color='red')
plt.title('last month when contacted')
plt.xlabel("Month")
plt.ylabel("Number of people")
plt.show()
last_day=df['day'].value_counts()
plt.bar(last_day.index,last_day.values,color='red')
plt.title('last day when contacted')
plt.xlabel("Day")
plt.ylabel("Number of people")
plt.show()
last_duration=df['duration'].value_counts()
sns.boxplot(data=df,y="duration")
plt.title('duration last contacted')
plt.ylabel("Duration in seconds")
plt.show()
campaign_num=df['campaign'].value_counts()
plt.bar(campaign_num.index,campaign_num.values,color='red')
plt.title('Contacts made for clients')
plt.xlabel("Number of contacts made")
plt.ylabel("Number of people")
plt.show()
print(campaign_num)
contacted_before = df[df['pdays'] >= 0]
not_contacted_before = df[df['pdays'] == -1]
plt.figure(figsize=(15, 8))
plt.hist(contacted_before['pdays'], bins=50, color='skyblue', edgecolor='black')
plt.xlabel('Number of Days passed since Last Contact')
plt.ylabel('Number of Clients')
plt.title('Distribution of Days Since Last Contact for Previously Contacted Clients')
plt.show()
contact_before_this=df['previous'].value_counts()
print(contact_before_this)
plt.hist(df['previous'],bins=[0,5,10,15,20,25,30,35,40,45,50])
plt.show()
Outcome=df['poutcome'].value_counts()
print(Outcome)
plt.bar(Outcome.index,Outcome.values,color='red')
plt.title('Outcome of campaign')
plt.xlabel("Category")
plt.ylabel("Number of people")
plt.show()
df.rename(columns={'y':'term_deposit'},inplace=True)
sub_to_termdeposit=df['term_deposit'].value_counts()
print(sub_to_termdeposit)
plt.pie(sub_to_termdeposit,labels=["no","yes"])
plt.show()

